from main import bot, client
from AlorPy import AlorPy  # –†–∞–±–æ—Ç–∞ —Å Alor OpenAPI V2
from Config import *
import openai
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
import time
from datetime import datetime



#
# async def global_chek(a):
#     global check
#     check = a
#     return
apProvider = AlorPy(Config.UserName, Config.RefreshToken)


def decorator_speed(func):
    def wrapper(*args, **kwargs):
        start = datetime.now()
        rez = func(*args, **kwargs)
        t = datetime.now() - start
        print(f'–°–∫–æ—Ä–æ–º—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - üöÄ {t}')
        return rez
    return wrapper





#–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç—É–ø–∞–µ—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–µ–º –∏
async def keyword_check(text, keywords):
    text = [str(i).upper() for i in text.split()]
    keywords = [str(i).upper() for i in keywords]
    for i  in text:
        if i in keywords or i[1:] in keywords or i[:-1] in keywords:
            return True
    return False


#–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ + —Ç–∏–∫–µ—Ä—ã
async def get_keyword(text, keywords):
    text = [str(i).upper() for i in text.split()]
    keywords = [str(i).upper() for i in keywords]
    def func(str):
        str1 = str
        return str in keywords or str in Config.tickers_moex or str1[1:] in Config.tickers_moex
    fitered = list(filter(func, text))
    fitered = set(fitered)
    return fitered


#–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–Ω—ã–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –æ—á–∏—â–∞–µ—Ç –≤—Å–µ —á—Ç–æ —Å—Ç–æ–∏—Ç –≤–ø–µ—Ä–µ–¥–∏ —Å–ª–æ–≤–∞ –∏ —Å–∑–∞–¥–∏ ,
#–µ—Å–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å–ª–æ–≤–∞ , —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ—Ç , –µ—Å–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ
#–Ω–µ –Ω–∞–π–¥–µ–Ω—ã , –≤–æ–∑—Ä–∞—â–∞–µ—Ç —Å–º–∞–π–ª–∏–∫ 'ü§∑‚Äç‚ôÇ'
def get_keyword_tiker_moex(text, keyword):
    #text: —Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏—Å–∏–Ω–≥–∞ , str
    #keyword: —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ , –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ , list
    ddd = []
    text = str(text)
    text = text.split()#—Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω –∞—Å–ª–æ–≤–∞
    # print(text)
    for i in text:#–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        for y in keyword:#–±–µ—Ä–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏–∫–∞
            rez = i.upper().partition(y)#—Å–ª–æ–≤–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–≤–æ–ª–∏–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä , –º–µ—Ç–æ–¥ partition
            #–Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –≤–∫–æ–Ω—Ü–µ –∏ –≤–æ–∑—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∏–ª–∏ –ø—É—Å—Ç—ã–º
            if rez[1] != '':#–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ  –ø—É—Å—Ç–æ–π
                if rez[1] in ddd:#–∏ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    continue#–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ , –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞
                ddd.append(rez[1])#–¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—Ç–∞
    # print(text)
    for i in text:#–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç
        # print(i.upper())
        if i.upper() in Config.dict_keywod_tiker:#–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –∑–∞–Ω—á–µ–Ω–∏—è–º–∏ –≤ —Ç–∏–∫–µ—Ä–∞—Ö
            # print(i.upper())
            if Config.dict_keywod_tiker[i.upper()] in ddd:#–µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å—Ç—å –≤—Å–ª–æ–≤–∞—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                continue#–ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏—Ç—Ç–µ—Ä–∞—Ü–∏—é  –∏ –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
            ddd.append(Config.dict_keywod_tiker[i.upper()])#–¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–ø–∏–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    return ddd[0] if len(ddd) >= 1 else 'ü§∑‚Äç‚ôÇ'#

    # text = [str(i).upper() for i in text.split()[0:7]]
    # def func(str):
    #     str1 = str
    #     return str in Config.tickers_moex or str1[1:] in Config.tickers_moex or  str1[:-1] in Config.tickers_moex
    # fitered = list(filter(func, text))



#–ø—Ä–æ–≤–µ—Ä–∫–∞ id –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–∞–µ—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ
async def id_check(id, list):
    if id in list:
        return True
    else:
        return False


#—Ñ—É–Ω–µ–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∑–∏ –∑–∞–ø—Ä–æ—Å–∞ chatGPT
def get_chatGPT(text):

    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=f"–°—Ç–æ—Å—Ç–∞–≤—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏  '{text}'",
        temperature=0.5,
        max_tokens=1000,
        top_p=1,
        frequency_penalty=0.5,
        presence_penalty=0.0
      )
    return response["choices"][0]["text"]


#–ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
def get_pozicion():
    rezult = apProvider.GetPositions(Config.PortfolioStocks, Config.exchange)[0]
    rezult = list(rezult.items())[:3]
    str = ''
    for key, value in dict(rezult).items():
        str += f'{key} - {value}\n'
    return str


def get_orders():
    str = ''
    rezult = apProvider.GetOrders(Config.PortfolioStocks, Config.exchange)
    return rezult


def get_orderbook(symbol):
    rezult = apProvider.GetOrderBook(Config.exchange,symbol,'MOEX')
    return rezult
    # print(rezult["bids"][3]["price"])
    # return (f'{rezult["bids"][0]["price"]} | {rezult["asks"][0]["price"]}\n{rezult["bids"][1]["price"]} | {rezult["asks"][1]["price"]}\n{rezult["bids"][2]["price"]} | {rezult["asks"][2]["price"]}')
    # for i in rezult['bids']:
    #     print(i)


# –ø–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
def get_portfolio():
    str = ''
    lis = ['–ù–∞–ª–∏—á–Ω—ã–µ', '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è', '–û—Ç–∫—Ä—ã—Ç—ã', '–ü—Ä–∏–±—ã–ª—å', '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏', '–ö–æ–º–∏—Å—Å–∏—è', '–ò–∑–∏–µ–Ω–µ–Ω–∏—è', '–ü–æ—Ä—Ç—Ñ–µ–ª—å', '–î–æ—Å—Ç—É–ø–Ω–æ']
    rezult  = apProvider.GetMoney(Config.PortfolioStocks, Config.exchange)
    c = 0
    for key, value in rezult.items():
        str += f'{lis[c]} - {value}\n'
        c += 1
    return str

# #—Å–æ–∑–¥–∞—Ç—å  –ª–∏–º–∏—Ç–Ω—É—é –∑–∞—è–≤–∫—É
# def create_limit_order(symbol, buy, summ,step_best_price ,portfolio='D78230',exchange='MOEX'):
#     x = "asks" if buy == 'buy' else "bids"
#     lot  = Config.info[symbol]['lotsize']
#     price = get_orderbook(symbol)
#     price = price[x][step_best_price]["price"]
#     print(price)
#     lot = int(int(summ) // (lot * price))
#     print(lot)
#     apProvider.CreateLimitOrder(portfolio ,exchange,symbol,buy, lot,float(price))


#—Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞—è–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —à–∞–≥–∞ —Ü–µ–Ω—ã , –ª–æ—Ç–Ω–æ—Å—Ç—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞ –±–∏—Ä–∂–µ
def calculate_new_price(step, percent, price, is_increase=True):
    # decimal_part = str(price).split('.')[1]
    if is_increase:
        new_price = price + (price * percent / 100)
    else:
        new_price = price - (price * percent / 100)
    if step == 1 :
        return round(new_price / step) * step
    else:
        new_price = round(new_price / step) * step
        new_price = "{:.6f}".format(new_price)
        return new_price


#–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∏–º—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ + –ª–∏ - –Ω–∞ 0.4% –æ—Ç —Ü–µ–Ω—ã —Ç–µ–∫—É—â–µ–π
@decorator_speed
def create_limit_order_profit(symbol, buy, summ, step_best_price, portfolio='D78230', exchange='MOEX'):
    x = "bids" if buy == 'buy' else "asks" #–ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –∫—É–ø–∏—Ç—å , –≤ –±–∏–¥ –∏–ª–∏ –∞—Å–∫ –∑–∞—è–≤–∫—É
    info = Config.info[symbol]#–ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É (–ª–æ—Ç–Ω–æ—Å—Ç—å , –Ω–∞–∑–≤–∞–Ω–∏–µ , –∑–Ω–∞–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä.)
    lot = info['lotsize']#—Å–æ —Å–ª–æ–≤–∞—Ä—è info –ø–æ–ª—É—á–∞–µ–º –ª–æ–Ω–æ—Å—Ç—å
    price = get_orderbook(symbol)#–ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω
    price = price[x][step_best_price]["price"]#–ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤ —Å—Ç–∞–∫–∞–Ω–µ , –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –±–∏–¥ –∏–ª–∏ –∞—Å–∫ –∏ –ø–æ–∑–∏—Ü–∏—é —Å—Ç–∞–∫–∞–Ω–∞ –≥–¥–µ "0" –ª—É—á—à–∞—è —Ü–µ–Ω–∞
    print(x)
    # price = price - (price * 0.004) if x == "bids" else price + (price  * 0.004)# –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –∫—É–ø–∏—Ç—å —Å –ª—é—Å–æ–º –≤ 0.4 %
    # is_increase = x == 'bids'
    print(price)
    lot = int(int(summ) // (lot * price))# –ø–æ–ª—É—á–∞–µ–º —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Å—É–º–º—É –∫—Ä–∞—Ç–Ω–æ –ª–æ—Ç–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    print(info['minstep'])
    # minstep = len(str(info['minstep'])[2:])#–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ —Ü–µ–Ω—ã (—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
    price = calculate_new_price(info['minstep'], 0.4, price, x == 'asks')#int(price) if info['minstep'] == 1 else round(float(price), minstep)#—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ª–æ—Ç–Ω–æ—Å—Ç–∏
    print(price)
    apProvider.CreateLimitOrder(portfolio, exchange, symbol, buy, lot, price)# –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä


def create_automatic_order(text):
    text = [str(i).upper() for i in  text.split()]
    print(text)
    if 'O–¢–öP–´–¢–òE' in text and 'LONG' in text and 'CPO–ö' in text and '–ò–îE–ò:' in text and '–îO' in text:
        print('long')
    else:
        print('stop')


# –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ
def keyword_search(text, keywords):
    text = [str(i).upper() for i in text.split()]
    # print(text)
    if all(keyword in text for keyword in keywords):
        return True
    else:
        return False




#–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ª–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
def get_symbol(symbol, exchange='MOEX'):
    rezult = apProvider.GetSymbol(exchange, symbol)
    return rezult


#—á—Ç–µ—Ü —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏ —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–æ–∫
async def reader_create_button(text, event , message, id_chennal, smiley,chanell_dict_reverse, **kwargs):
    tiker = str(get_keyword_tiker_moex(text, Config.tickers_moex))
    if tiker == 'ü§∑‚Äç‚ôÇ':
        markup = InlineKeyboardMarkup()
        # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –∏ id - 'but_1'
        but_1 = InlineKeyboardButton(f'ü§∑‚Äç‚ôÇ –¢–∏–∫–µ—Ä –∞–∫—Ü–∏–∏ MOEX –Ω–µ –Ω–∞–π–¥–µ–Ω', callback_data=f'2 10000 buy {tiker}')
        markup.add(but_1)
        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–∏—è , –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π chat_name {Config.channel_vip_dict_reverse[id_chennal]
        event.message.text = f'{smiley}\n\n{chanell_dict_reverse[id_chennal]}' + f"\n\n{event.message.text}"
        await bot.send_message(-1001701470058, message.message, reply_markup=markup)
    else:
        key_word = ['–∏–¥–µ—è', '#–∏–¥–µ—è', '–ª–æ–Ω–≥', 'long', '–ø–æ–∫—É–ø–∞—é',
                    '–∫—É–ø–∏–ª', '—à–æ—Ä—Ç', 'short', '–ø—Ä–æ–¥–∞—é', '–ø—Ä–æ–¥–∞–ª',
                    '–ø–æ–∫—É–ø–∫–∞', '–æ—Ç–∫—Ä—ã–ª', '–≤–∑—è–ª', '—Ñ–∏–∫—Å–∏—Ä—É—é',
                    '–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª', '—Ñ–∏–∫—Å–∏—Ä—É–µ–º', '–∑–∞–∫—Ä—ã–ª', '–∑–∞–∫—Ä—ã–≤–∞—é', '–∑–∞–∫—Ä–æ–π—Ç–µ', '–∑–∞–∫—Ä—ã–≤–∞–µ–º']
        value = await keyword_check(text, key_word)
        if value:
            key_word_long = ['–ª–æ–Ω–≥', 'long', '–ø–æ–∫—É–ø–∞—é', '–∫—É–ø–∏–ª', '–ø–æ–∫—É–ø–∫–∞', '–≤–∑—è–ª', '–æ—Ç–∫—Ä—ã–ª –ª–æ–Ω–≥']
            value = await keyword_check(text, key_word_long)
            if value:
                # tiker = str(get_keyword_tiker_moex(text, Config.tickers_moex))
                #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                markup = InlineKeyboardMarkup(row_width=3)
                # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –∏ id - 'but_1'
                but_1 = InlineKeyboardButton(f'üü¢{tiker} 40k', callback_data=f'0 40000 buy {tiker}')
                but_2 = InlineKeyboardButton(f'üü¢{tiker} 80k', callback_data=f'0 80000 buy {tiker}')
                but_3 = InlineKeyboardButton(f'üî¥ +0,4% 40k', callback_data=f'1 40000 sell {tiker}')
                but_4 = InlineKeyboardButton(f'üî¥{tiker} 40k', callback_data=f'0 40000 sell {tiker}')
                but_5 = InlineKeyboardButton(f'üî¥{tiker} 80k', callback_data=f'0 80000 sell {tiker}')
                but_6 = InlineKeyboardButton(f'üü¢ -0,4% 40k', callback_data=f'1 40000 buy {tiker}')
                # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                markup.add(but_1, but_2, but_3, but_4, but_5, but_6)
                # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–∏—è , –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π chat_name {Config.channel_vip_dict_reverse[id_chennal]
                event.message.text = f'{smiley}\n\n{chanell_dict_reverse[id_chennal]}' + f"\n\n{event.message.text}"
                # print('long')
                # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–º –≤ –∫–∞–Ω–∞–ª —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await bot.send_message(-1001701470058, message.message, reply_markup=markup)
                # print(f'{"–ü–æ–∫—É–ø–∫–∞"} : {tiker}')
            key_word_short = ['—à–æ—Ä—Ç', 'short', '–ø—Ä–æ–¥–∞—é', '–ø—Ä–æ–¥–∞–ª', '–∑–∞–∫—Ä—ã–ª –ª–æ–Ω–≥', '—Ñ–∏–∫—Å–∏—Ä—É—é',
                              '–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª', '—Ñ–∏–∫—Å–∏—Ä—É–µ–º', '–∑–∞–∫—Ä—ã–ª', '–∑–∞–∫—Ä—ã–≤–∞—é', '–∑–∞–∫—Ä–æ–π—Ç–µ',
                              '–∑–∞–∫—Ä—ã–≤–∞–µ–º']
            value =await keyword_check(text, key_word_short)
            # print(value)
            if value:
                # tiker= str(get_keyword_tiker_moex(text, Config.tickers_moex))
                # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                markup = InlineKeyboardMarkup(row_width=3)
                # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –∏ id - 'but_1'
                but_1 = InlineKeyboardButton(f'üî¥{tiker} 40k', callback_data=f'0 40000 sell {tiker}')
                but_2 = InlineKeyboardButton(f'üî¥{tiker} 80k', callback_data=f'0 80000 sell {tiker}')
                but_3 = InlineKeyboardButton(f'üü¢ -0,4% 40k', callback_data=f'1 40000 buy {tiker}')
                but_4 = InlineKeyboardButton(f'üü¢{tiker} 40k', callback_data=f'0 40000 buy {tiker}')
                but_5 = InlineKeyboardButton(f'üü¢{tiker} 80k', callback_data=f'0 80000 buy {tiker}')
                but_6 = InlineKeyboardButton(f'üî¥ +0,4% 40k', callback_data=f'1 40000 sell {tiker}')
                # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                markup.add(but_1, but_2, but_3, but_4, but_5, but_6)
                print('short')
                # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–∏—è , –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π chat_name {Config.channel_vip_dict_reverse[id_chennal]
                event.message.text = f'{smiley}\n\n{chanell_dict_reverse[id_chennal]}' + f"\n\n{event.message.text}"
                # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–º –≤ –∫–∞–Ω–∞–ª —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await bot.send_message(-1001701470058, message.message, reply_markup=markup)
        else:
            # tiker = str(get_keyword_tiker_moex(text, Config.tickers_moex))
            # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = InlineKeyboardMarkup(row_width=3)
            # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å" –∏ id - 'but_1'
            but_1 = InlineKeyboardButton(f'üü¢{tiker} 40k', callback_data=f'0 40000 buy {tiker}')
            but_2 = InlineKeyboardButton(f'üü¢{tiker} 80k', callback_data=f'0 80000 buy {tiker}')
            but_3 = InlineKeyboardButton(f'üî¥ +0,4% 40k', callback_data=f'1 40000 sell {tiker}')
            but_4 = InlineKeyboardButton(f'üî¥{tiker} 40k', callback_data=f'0 40000 sell {tiker}')
            but_5 = InlineKeyboardButton(f'üî¥{tiker} 80k', callback_data=f'0 80000 sell {tiker}')
            but_6 = InlineKeyboardButton(f'üü¢ -0,4% 40k', callback_data=f'1 400000 buy {tiker}')
            # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup.add(but_1, but_2, but_3, but_4, but_5, but_6)
            # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–∏—è , –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π chat_name {Config.channel_vip_dict_reverse[id_chennal]
            event.message.text = f'{smiley}\n\n{chanell_dict_reverse[id_chennal]}' + f"\n\n{event.message.text}"
            # print('long')
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–º –≤ –∫–∞–Ω–∞–ª —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await bot.send_message(-1001701470058, message.message, reply_markup=markup)


import concurrent.futures


def get_price(symbol, x, step_best_price):
    price = get_orderbook(symbol)
    return price[x][step_best_price]["price"]

@decorator_speed
def create_limit_order(symbol, buy, summ, step_best_price, portfolio='D78230', exchange='MOEX'):
    x = "asks" if buy == 'buy' else "bids"
    info = Config.info[symbol]
    lot = info['lotsize']

    with concurrent.futures.ThreadPoolExecutor() as executor:
        price_future = executor.submit(get_price, symbol, x, step_best_price)
        price = price_future.result()

        lot = int(int(summ) // (lot * price))
        # price = calculate_new_price(info['minstep'], 0.4, price, x == 'asks')

        apProvider.CreateLimitOrder(portfolio, exchange, symbol, buy, lot, float(price))

    # rezult_ison = []
    # all_potok_futures = []
    # def fanc(tikers, str1=str):
    #     try:
    #         rezult_ison.append(get_tiker(tikers, str1))
    #     except:
    #         rezult_ison.append('0')
    # for i in list_tikers: # –ø—Ä–æ—Ö–æ–¥–∏–º —Ü—ã–∫–ª–æ–º –ø–æ —Å–ª–æ–≤—è—Ä—é —Å —Ç–∏–∫–µ—Ä–∞–º–∏ —Ñ—å—é—á–µ—Ä—Å–æ–≤
    #     pt_1 = threading.Thread(target=fanc, args=(i,str)) #—Å–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ—Ç –∑–∞–ø—Ä–æ—Å–∞
    #     all_potok_futures.append(pt_1) #–¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ—Ç , —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å
    #     pt_1.start()  #–∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫
    # for i in all_potok_futures:# –∑–∞–ø—É—Å–∫–∞–µ–º —Ü—ã–∫–ª –ø–æ —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    #     i.join() # –∂–¥–µ–º –ø–æ–∫–∞ –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è
    # return rezult_ison









async def forward_messages(source_channel, destination_channel, time_interval, delay):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    until_date = None
    if time_interval > 0:
        until_date = int(time.time())  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ Unix-—Ñ–æ—Ä–º–∞—Ç–µ
        from_date = until_date - time_interval

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    async for message in client.iter_messages(source_channel, limit=10, reverse=True, from_user='me'):
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª
        # await asyncio.sleep(delay)
        print(message)
        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª
        # await client.forward_messages(destination_channel, message)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
source_channel = 'source_channel_id'
destination_channel = 'destination_channel_id'
time_interval = 24 * 60 * 60  # 24 —á–∞—Å–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
delay = 5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


# loop = asyncio.get_event_loop()
# loop.run_until_complete(forward_messages(source_channel, destination_channel, time_interval, delay))
# print(get_symbol("MOEX")['lotsize'])

# rez = get_symbol('SBER')
# print(rez['lotsize'])
# get_symbol('SBER')
# create_limit_order('gazp')
#
# get_orderbook('SBER')

# apProvider.CreateLimitOrder('D78230','MOEX', 'GAZP', 'buy', 1, 179.03)
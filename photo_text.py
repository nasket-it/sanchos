import pytesseract
import easyocr
import cv2
import matplotlib.pyplot as plt
from PIL import Image
# from all_functions import get_keyword_tiker_moex, decorator_speed
from Config import Config
from PIL import Image
import pytesseract
import io
import re

def raspoznavanie_texta_na_photo(photo):
    # —á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OpenCV
    image = cv2.imread(photo)
    # –∏–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—É—à–∫—É
    # image = Image.open("test.png")

    # –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É
    string = pytesseract.image_to_string(image, lang='eng' )
    # string2 = pytesseract.image_to_string(image,lang='rus')
    # rezult = string2 + string
    # r = re.compile("[–∞-—è–ê-–Ø]+")
    # words = str(string2).split()
    # russian = [w for w in filter(r.match, words)]

    # –ø–µ—á–∞—Ç–∞–µ–º
    return string
# raspoznavanie_texta_na_photo()

# def raspoznavanie_texta_na_photo():
#     reader = easyocr.Reader(['en'])
#     rezult = reader.readtext("exempl_goodwin_signals.jpg")
#     print(rezult)
# raspoznavanie_texta_na_photo()




def fast_image_to_text(image_path):
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = cv2.imread(image_path)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç—Ç–µ–Ω–∫–∏ —Å–µ—Ä–æ–≥–æ
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º—ã—Ç–∏—è –ø–æ –ì–∞—É—Å—Å—É
    blur = cv2.GaussianBlur(gray, (3, 3), 0)

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –û—Ü—É
    thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–∞
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
    opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=1)

    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    text = pytesseract.image_to_string(opening, lang='eng', config='--psm 6')

    return text


def photo_to_text(photo):
    text = pytesseract.image_to_string(photo, lang='rus+eng')
    return text


async def download_photo(event, client):
    if event.photo:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo_bytes = await client.download_media(event.photo, bytes)
        image = Image.open(io.BytesIO(photo_bytes))
        return image


def filter_words_rus_en(lst):
    pattern = re.compile(r'^[–∞-—è–ê-–Øa-zA-Z]+$')
    filtered_list = [word for word in lst if pattern.match(word)]
    text = ' '.join(filtered_list)
    return f'üåøüåøüåø –¢–µ–∫—Å—Ç –∏–∑ —Ñ–æ—Ç–æ \n{text}'

import uuid
import os
import speech_recognition as sr
from pydub import AudioSegment
import tempfile


def decorator_remove_file(func):
    def wrapper(*args, **kwargs):
        rez = func(*args, **kwargs)
        try:
            os.remove('voice_message.ogg')
            os.remove('voice_message.wav')
        except:
            pass
        return rez
    return wrapper
#
def convert_ogg_wav(file):
    wfn = file.replace('.ogg', '.wav')
    x = AudioSegment.from_file(file)
    x.export(wfn, format='wav')


language='ru_RU'


@decorator_remove_file
def audio_to_text(file):
    r = sr.Recognizer()
    with sr.AudioFile(file) as source:
        audio = r.record(source)
        text = r.recognize_google(audio_data=audio, language=language)
        return text



def convert_and_recognize(file_path):
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
    with tempfile.NamedTemporaryFile(delete=True) as temp_wav:
        audio = AudioSegment.from_ogg(file_path)
        audio.export(temp_wav.name, format="wav")  # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ wav-—Ñ–æ—Ä–º–∞—Ç–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

        recognizer = sr.Recognizer()
        with sr.AudioFile(temp_wav.name) as source:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ –∏–∑ —Ñ–∞–π–ª–∞
            audio_file = recognizer.record(source)
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é Google Speech Recognition
            try:
                result = recognizer.recognize_google(audio_file, language='ru-RU')
                print('–†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç:', result)
                return result
            except sr.UnknownValueError:
                print("Google Speech Recognition –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –∞—É–¥–∏–æ")
            except sr.RequestError:
                print("Could not request results from Google Speech Recognition service")


async def dewnload_and_converted_audio_text(event):
    if event.message.voice:
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_message = await event.message.download_media()

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        with tempfile.NamedTemporaryFile(delete=True) as temp_ogg:
            # –ö–æ–ø–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(voice_message, 'rb') as file:
                temp_ogg.write(file.read())

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            text = convert_and_recognize(temp_ogg.name)
            return f'üë∫ Voice\n{text}'

async def esli_voice_to_text_ili_text_text(event):
    return f'üí•üîäüí≠  {await dewnload_and_converted_audio_text(event)}\n{event.message.message}' if  event.message.voice else event.message.message
    # if event.message.voice:#–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ
    #     text =f'üí•üîäüí≠  {await dewnload_and_converted_audio_text(event)}'
    # else:
    #     text = event.message.message # –¥–æ—Å—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏
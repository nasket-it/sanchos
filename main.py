from secrete import Token
# from message_reading import oleg_reading
from datetime import datetime
from telethon import *
from all_functions import *
from aiogram import Bot, Dispatcher , types, executor
# from user_79065475988 import client2
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
# from AlorPy import AlorPy  # –†–∞–±–æ—Ç–∞ —Å Alor OpenAPI V2
from keywords import Keywords, Risck
from Config import Config  # –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from bs4 import BeautifulSoup


API_TOKEN = Token.bot_token


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


#—Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ê–ª–æ—Ä
# apProvider = AlorPy(Config.UserName, Config.RefreshToken)

exchange = 'MOEX'  # –ö–æ–¥ –±–∏—Ä–∂–∏ MOEX –∏–ª–∏ SPBX
symbol = 'SBER'  # –¢–∏–∫–µ—Ä
port_io = 'D78230'


#api –∫–ª—é—á–∏ –∏ —Ç–æ–∫–µ–Ω—ã
account = ['-1001892817733','-1001857334624']
api_id = Token.api_id  # –∑–∞–¥–∞–µ–º API
api_hash = Token.api_hash  # –∑–∞–¥–∞–µ–º HASH
phone = Token.phone

async def get_dialodgs():
    dialogs = await client.get_dialogs()
    dialogs = [f'{i.name} : {i.id}' for i in dialogs ]
    print(dialogs)

client2 = TelegramClient('my_account.session2', Token.api_id2, Token.api_hash2)
client = TelegramClient('my_account.session', api_id, api_hash)


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–∞ –Ω–æ–º–µ—Ä client2
@client2.on(events.NewMessage())
async def client2_channels_handler(event):
    id_chennal = event.message.chat_id # –¥–æ—Å—Ç–∞–µ–º id—á–∞—Ç–∞ –∏–ª–∏ –∫–∞–∫–Ω–∞–ª –æ—Ç –∫–æ—Ç–æ—Ä–æ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = event.message # –¥–æ—Å—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–µ —Å –º–µ–¥–∏–∞
    text = event.message.message # –¥–æ—Å—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏
    user_id = event.message.from_id # –¥–æ—Å—Ç–∞—ë–º id —é–∑–µ—Ä–∞
    tiker = str(get_keyword_tiker_moex(text, Config.tickers_moex)) # –Ω–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
    if id_chennal in Config.channel_vip_vip_id:#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ id –∏–∑ —Å–ø–∏—Å–∫–∞ channel_vip_vip_id
        time_now = str(datetime.now())[11:-4]
        await reader_create_button(text, event, message, id_chennal, f'üì¨VIP_VIP-channel\n -- {time_now} üï∞',
                                   Config.channel_vip_vip_reverse)
        if tiker == 'ü§∑‚Äç‚ôÇ':  # –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç —Ç–∏–∫–µ—Ä–∞ MOEX
            print(f'–í –¥–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–µ–∫–µ—Ä—ã MOEX')
        else:  # –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∏–∫–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
            if id_chennal == Config.channel_vip_vip['–ú–∞—Å—Ç–µ—Ä –†–æ—Å—Å–∏—èüí∞']:
                time_now = str(datetime.now())[11:-4]
                print('üöÄ - –ú–∞—Å—Ç–µ—Ä –†–æ—Å—Å–∏—èüí∞', time_now)
                chernihMaster_reading(text, tiker)
            if id_chennal == Config.channel_vip_vip['–ë–∏—Ä–∂–µ–≤–∏–∫ VIP | –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –¢—Ä–µ–π–¥–∏–Ω–≥üí∞']:
                time_now = str(datetime.now())[11:-4]
                print('üöÄ - –ë–∏—Ä–∂–µ–≤–∏–∫ VIPüí∞', time_now)
                birgewik_reading(text, tiker)
            if id_chennal == Config.channel_vip_vip['–í–ò–ü –∫–∞–Ω–∞–ªüí∞']:
                time_now = str(datetime.now())[11:-4]
                print('üöÄ - –ß–µ—Ö–æ–≤ –í–ò–ü –∫–∞–Ω–∞–ªüí∞', time_now)
                chehov_reading(text, tiker)


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–∞ –Ω–æ–º–µ—Ä client
@client.on(events.NewMessage())
async def client_channels_handler(event):
    id_chennal = event.message.chat_id  # –¥–æ—Å—Ç–∞–µ–º id—á–∞—Ç–∞ –∏–ª–∏ –∫–∞–∫–Ω–∞–ª –æ—Ç –∫–æ—Ç–æ—Ä–æ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = event.message  # –¥–æ—Å—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–µ —Å –º–µ–¥–∏–∞
    text = event.message.message  # –¥–æ—Å—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏
    # user_id = message.from_id.user_id # –¥–æ—Å—Ç–∞—ë–º id —é–∑–µ—Ä
    # username = user_id.username
    tiker = str(get_keyword_tiker_moex(text, Config.tickers_moex))  # –Ω–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
    if id_chennal in Config.pamper_channels_id:
        if tiker == 'ü§∑‚Äç‚ôÇ':  # –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç —Ç–∏–∫–µ—Ä–∞ MOEX
            print(f'–í –¥–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–µ–∫–µ—Ä—ã MOEX')
        else:  # –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∏–∫–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
            if id_chennal == Config.pamper_channels['–°–ò–ì–ù–ê–õ–´ –æ—Ç CASHFLOW']:
                cashflow_publick_reading(text, tiker)
            if id_chennal == Config.pamper_channels['–ú–û–°–ö–û–í–°–ö–ò–ô –ò–ù–í–ï–°–¢–û–†']:
                mosinvestor_publick_reading(text, tiker)
    if id_chennal == Config.fast_id:
        header_message = str(event.message.message).split('\n')[0]  # –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—Ä–µ–∑–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ , –≥–¥–µ —É–∫–∞–∑–∞–Ω–æ —Å –∫–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø–µ—Ä—Å—ã–ª
        if tiker == 'ü§∑‚Äç‚ôÇ':  # –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç —Ç–∏–∫–µ—Ä–∞ MOEX
            print(f'–í –¥–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–µ–∫–µ—Ä—ã MOEX')
        else:  # –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∏–∫–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
            if '–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ K-trade' in header_message:
                print('ü•µüí∏ - K-trade')
                k_trade_reading(text, tiker)
            if '–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ GP INTRADAY' in header_message:
                print('ü•µüí∏ - Goodwin Production')
                goodwin_reading(text, tiker)
            # if '–û–ª–µ–≥ —Ç–æ—Ä–≥—É–µ—Ç' in  header_message:
            #     oleg_reading(text, tiker)
            #     print('ü•µüí∏ - –û–ª–µ–≥ —Ç–æ—Ä–≥—É–µ—Ç')
            if '–ö–ª—É–± ProfitKing' in header_message:
                print('ü•µüí∏ - –ö–ª—É–± ProfitKing')
                ProfitKing_reading(text, tiker)
            if '–í–ò–ü –∫–∞–Ω–∞–ª' in header_message:
                print('ü•µüí∏ - –ß–µ—Ö–æ–≤ –í–ò–ü –∫–∞–Ω–∞–ª')
                chehov_reading(text, tiker)
            if '–†–§+–°–®–ê' in header_message:
                print('ü•µüí∏ - –ß–µ—Ä–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä —Ä–æ—Å—Å–∏—è ')
                chernihMaster_reading(text, tiker)
            if 'Premium –°–ò–ì–ù–ê–õ–´' in header_message:
                print('ü•µüí∏ - Premium –°–ò–ì–ù–ê–õ–´  ')
                cashflow_vip_reading(text, tiker)
    if id_chennal in Config.channel_pyblic_id:
        time_now = str(datetime.now())[11:-4]
        await reader_create_button(text, event, message, id_chennal, f'üê¢ üõÇPublic - channel\n -- {time_now} üï∞',Config.channel_pyblic_dict_reverse)
    if id_chennal in Config.channel_vip_id:
        time_now = str(datetime.now())[11:-4]
        await reader_create_button(text, event, message, id_chennal, f'üî∏VIP-channel\n -- {time_now} üï∞',Config.channel_vip_dict_reverse)
        if id_chennal == Config.channel_vip_dict['–ö–æ–≥–∞–Ω | VipPirates']:
            print('ü•µüí∏ –ö–æ–≥–∞–Ω | VipPirates')
            kogan_vip_reading(text, tiker)
    if id_chennal in Config.news_vip_id:
        time_now = str(datetime.now())[11:-4]
        await reader_create_button(text, event, message, id_chennal, f'üìÆ VIP-news\n -- {time_now} üï∞',Config.news_vip_dict_reverse)
    if id_chennal == Config.tdmap_channels_id:
        if message.from_id.user_id == Config.tdmap_user_id:
            print(f'üíÇüíÇ - –Ω–∞–ø–∏—Å–∞–ª TDmap')
            try:
                await reader_create_button(text, event, message, id_chennal, f'üíÇ‚ÄçüíÇüíÇ‚Äç - TDmap - ü™ß',Config.tdmap_channels_reverse)
            except:
                print('user_id - –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')











@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç')\

@dp.message_handler()
async def process_start_command(message: types.Message):
    print(message)
    url = message["entities"][0]["url"]
    print(url)
    response = get_request(url)
    soup = BeautifulSoup(response.text , 'html.parser')
    div_tag = soup.find('div', {'style': 'word-break: break-word; word-wrap: break-word; white-space: pre-wrap;'})
    if div_tag:
        extracted_text = div_tag.get_text(strip=True)
        text = disclouser(extracted_text)
        print(extracted_text)
        print(text)
    # await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç')




#—â–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler()
async def buttons_press(callback_query):
    print(callback_query.data)
    if str(callback_query.data).split()[0] == '2':
        tiker = str(callback_query.data).split()[-1]
        print(tiker)
        buy = 'buy'
        print(buy)
        summ = risk(tiker)
        create_limit_order(tiker, buy, summ, 0)
        await bot.send_message(-1001701470058,f'üò± full  - {tiker} {summ} {buy} ')
        await callback_query.answer()
    else:
        if str(callback_query.data).split()[0] == '0':
            tiker = str(callback_query.data).split()[-1]
            print(tiker)
            buy = str(callback_query.data).split()[2]
            print(buy)
            summ = str(callback_query.data).split()[1]
            print(summ)
            create_limit_order(tiker,buy,summ, 0)
            await bot.send_message(-1001701470058, f'{tiker}')
            # await bot.send_message(-1001701470058, f'üíµ–ü–æ—Ä—Ç—Ñ–µ–ª—å\n{porfolio}\nüß∞–ü–æ–∑–∏—Ü–∏–∏\n{pozicion}\nüìí–û—Ä–¥–µ—Ä–∞\n{all_orders}')
            await callback_query.answer()
        elif str(callback_query.data).split()[0] == '1':
            tiker = str(callback_query.data).split()[-1]
            print(tiker)
            buy = str(callback_query.data).split()[2]
            print(buy)
            summ = str(callback_query.data).split()[1]
            print(summ)
            create_limit_order_profit(tiker, buy, summ, 0)
            await bot.send_message(-1001701470058, f'{tiker}')
            # await bot.send_message(-1001701470058, f'üíµ–ü–æ—Ä—Ç—Ñ–µ–ª—å\n{porfolio}\nüß∞–ü–æ–∑–∏—Ü–∏–∏\n{pozicion}\nüìí–û—Ä–¥–µ—Ä–∞\n{all_orders}')
            await callback_query.answer()





if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telethon
    client.start()
    client2.start()
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ aiogram
    executor.start_polling(dp)
    # client.loop.run_until_complete(main())
    # client.loop.run_until_complete(get_dialodgs())

